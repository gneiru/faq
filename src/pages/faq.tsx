import { type NextPage } from "next";
import Head from "next/head";
import { z } from "zod";
import { Button } from "~/ui/button";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger,
} from "~/ui/dialog";
import { Label } from "~/ui/label";
import { Separator } from "~/ui/separator";
import { Textarea } from "~/ui/textarea";
import { type RouterOutputs, api } from "~/utils/api";
import { useZodForm } from "~/utils/zod-form";
import { UserAvatar } from "~/components/UserAvatar";
import { LoadingSpinner } from "~/components/Loading";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { useToast } from "~/hooks/useToast";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <FAQPosts />
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="subtle">Post a FAQ</Button>
            </DialogTrigger>
            <DialogContent>
              <DialogTitle>Post a FAQ</DialogTitle>
              <DialogDescription>
                FAQ stands for Frequently Asked Question
              </DialogDescription>
              <FAQForm />
            </DialogContent>
          </Dialog>
        </div>
      </main>
    </>
  );
};

function FAQPosts() {
  const { data, isLoading } = api.faq.getAll.useQuery();

  if (isLoading)
    return (
      <div className="flex grow">
        <LoadingSpinner />
      </div>
    );

  if (!data) return <div>Nothing to display</div>;

  return (
    <>
      {data.map((faq) => (
        <FAQCard {...faq} key={faq.id} />
      ))}
    </>
  );
}

type FAQWithUser = RouterOutputs["faq"]["getAll"][number];
function FAQCard(faq: FAQWithUser) {
  return (
    <>
      <div>
        <div className="space-y-1">
          <h4 className="text-sm font-medium leading-none">Question: {faq.question}</h4>
          <p className="text-sm">
            Answer: {faq.answer}
          </p>
        </div>
        <Separator className="my-4" />
        <div className="flex h-5 items-center space-x-4 text-sm">
          <Link href={`https://github.com/${faq.user.id ?? ''}`}>Github</Link>

          <Separator orientation="vertical" />
          <div className="flex flex-row justify-center content-center">
            <UserAvatar src={faq.user.image ?? "" } username={faq.user.name ?? "shadn"} />{" "}
            <div>{faq.user.name}</div>
          </div>
        </div>
      </div>
    </>
  );
}
export const FAQFormSchema = z.object({
  question: z.string().min(3).includes("?"),
  answer: z.string().min(5),
});

function FAQForm() {
    const { data: session } = useSession();
    const { toast } = useToast();
  const methods = useZodForm({
    schema: FAQFormSchema,
  });

  const utils = api.useContext();
  const createFAQ = api.faq.create.useMutation({
    onSettled: async () => {
      await utils.faq.invalidate();
      methods.reset();
      toast({
        title: "Successfully posted a FAQ!",
        description: "Close the Modal to check."
      })
    },
  });

  const onSubmit = methods.handleSubmit(
    (data) => {
      // console.log(data);
      createFAQ.mutate(data);      
    },
    (e) => {
      console.log("Whoops... something went wrong!");
      console.error(e);
    }
  );

  return (
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    <form action="" className="flex flex-col gap-4" onSubmit={onSubmit}>
      <div className="space-y-1">
        <Label htmlFor="name">Question</Label>
        <Textarea
          id="name"
          placeholder="What is my favorite programming language?"
          {...methods.register("question")}
        />
        <p className="font-medium text-red-500">
          {methods.formState.errors?.question?.message}
        </p>
      </div>
      <div className="space-y-1">
        <Label htmlFor="text">Answer</Label>
        <Textarea
          id="text"
          placeholder="Jake++"
          {...methods.register("answer")}
        />
        <p className="font-medium text-red-500">
          {methods.formState.errors?.answer?.message}
        </p>
      </div>

      <Button type="submit" disabled={!session}>
        {!session ? (
          "Sign in to Post"
        ) : createFAQ.isLoading ? (
          <>
            <LoadingSpinner />
            <span>Loading ...</span>
          </>
        ) : (
          "Post"
        )}
      </Button>
      <p className="font-medium text-red-500">{createFAQ.error?.message}</p>
    </form>
  );
}
export default Home;
